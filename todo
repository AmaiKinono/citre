# User option

- Tags generation recipe system

  Through such system, people can specify target name, target path (`nil` means
  use output of ctags directly), ctags command (`nil` means use the command
  built by Citre), which directories will make use of them (`nil` means the
  whole project), and when should it be automatically updated (this is a list
  of directories, when files in these dirs are saved, the tags file is
  updated. `nil` means always, and `'no` means don't).

  Ideally, we should do incremental update. I've seen some vim plugins that can
  do this (so we must do better!). The basic idea is when saving, remove those
  lines in the tags file that belongs to this file, than only scan this file
  and use the "append" option to update. But here's a trap: when using
  something like wgrep, we may save a lot of files at a time. We should use
  some kind of lock to make this safe. Another thing is we need to modify the
  command specified by the user to change the input files, and the command may
  use a configuration file, then it's impossible to modify. Let's see if feed
  files from stdin can override this. Or at least we can ask the user not to
  specify input files in the command, and write them to the recipe instead.

  We should design the system so configuring it for a simple project is easy,
  at the same time it can serve for any large projects.

# Functionality

- Jump to definition from a dependency that's not in the root of current

  Maybe this is not worth it, but it's nice in some situations. We need to
  modify the project root detection method. If we can't detect the root, but
  it's a dependency of an opening project (just check through recipes in
  `citre--project-info-alist`), then set the root to be that project's root.
  Then, after `citre-jump`, enable Citre mode, then the project root is set,
  and we need to somehow know which are the targets it use (again, let the user
  specify the input files for each target can be handy). If this can be done,
  everything should work like usual.

  Let me rethink this. We want to make sure these things works after jumping to
  a definition that's not in the project root:

  - If itself is a configured project, then everything should works. We can
    confirm this by detecting tags file / tags generation recipe. Notice that
    for the code map, they should still be treated as in the project we jump
    from, or the history will lost. We can do this by a buffer-local
    `citre--map-project-root` variable.

  - If it isn't a configured project, then at least jumping to definition
    should works so we can go really deep. My thought is just set its root to
    the project we come from. This should work and the reason is long:

    In future ctags will have the ability to automatically analyse the imported
    modules in a file, so we'll have an `citre-common-dependency-alist` whose
    keys are languages (maybe major modes, or file extensions), and values are
    typical dependency/site-package directories of popular package
    manager/virtualenvs. We can also explicitely specify the dependency
    directories for a project. When using Citre, it will scan the current file,
    find the tags in the tags file, and if there are still modules that's not
    covered, find in dependency dirs (maybe an option for users who only wants
    to use the tags file and not do further search). Now when we are in a file
    that belongs to a project, but not in its root, we can do basically the
    same thing, maybe get rid of the relative paths in
    `citre-common-dependency-alist` and the specified dependencies since they
    are for things in the project root.

- imenu integration

  Let ctags scan current file to generate imenu index. If the file is modified,
  we could save it in a temp file first, but maybe this is a bit overkill.
  Also, probably we don't want to generate a tags file, but it's unclear how to
  pipe the ctags output to readtags. The "process substitution" technique
  suggested below is one way to do this, but readtags may be not guaranteed to
  read from a pipe in the future.

  readtags can't read tags from stdin, one way I found is to use named pipe, it
  functions like a file but is a pipe. Bash and some other shells can do
  "process substitution", like this:

  ```console
  $ readtags -t <(ctags -R -f-) -l
  ```

  This is really neat, but not POSIX compatible. For POSIX compatible solution,
  we can create a named pipe with a unique name first, and use it:

  ```console
  $ tmp=$(mktemp -u citre-temp-XXXX --tmpdir)
  # I don't know why I can't write ctags output directly to this named pipe
  # here. I have to redirect to it.
  $ mkfifo $tmp && (ctags -R -f- > $tmp &) && readtags -t $tmp -l && rm $tmp
  ... readtags output ...
  ```

  We could put them in one line, and that's pretty much a poor man's process
  substitution.
# Misc

  - We need a `citre-doctor`. It sees if the user is using universal ctags,
    prints the current project root, and tags files in use.

    If the user is using universal ctags, then we can look into the pseudo tags
    and see if the output format is indeed u-ctags, and are the needed fields
    presented in the tags files.
